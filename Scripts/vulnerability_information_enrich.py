import requests
import json
import pymysql
import os

os.environ["http_proxy"] = "http://127.0.0.1:33210"
os.environ["https_proxy"] = "http://127.0.0.1:33210"


headers = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) "
                  "Chrome/99.0.4844.51 Safari/537.36 "
}

conn = pymysql.connect(
    host="localhost",
    user="root",
    password="SteinsGate0",
    database="oss_security_estimator",
    charset="utf8"
)

cursor = conn.cursor()

# initialization
sql1 = "select github_project_relative_path, cve_number from vulnerable_project_in_huntre group by " \
       "github_project_relative_path, cve_number "
cursor.execute(sql1)
vulnerable_project_in_huntre_fetch_results = cursor.fetchall()
cursor.close()

# for result in vulnerable_project_in_huntre_fetch_results:
sql2 = "insert into project_cve_table (github_project_relative_path, cve_number) values (%s, %s)"
cursor = conn.cursor()
try:
    cursor.executemany(sql2, vulnerable_project_in_huntre_fetch_results)
    conn.commit()
except pymysql.err.OperationalError as e:
    conn.rollback()
    print("initialization error")
finally:
    cursor.close()

# information enrichment
cursor = conn.cursor()
sql3 = "select * from project_cve_table"
cursor.execute(sql3)
project_cve_table_fetch_results = cursor.fetchall()
cursor.close()

nvd_api_key = os.getenv("NVD_API_KEY")
assert nvd_api_key, "NVD_API_KEY needs to be set."
url = "https://services.nvd.nist.gov/rest/json/cves/1.0/"

for result in project_cve_table_fetch_results:
    params = {
        "keyword": result[0],
        "apiKey": nvd_api_key,
        "resultsPerPage": 2000
    }
    response = requests.get(url=url, params=params)
    data = json.loads(response.content)
    result_per_page = data["resultsPerPage"]
    starIndex = data["startIndex"]
    total_result = data["totalResults"]
    while starIndex < total_result:
        if starIndex:
            params["startIndex"] = starIndex
            data = json.loads(requests.get(url=url, params=params).content)
            _result = data["result"]
        else:
            _result = data["result"]

        items = _result["CVE_Items"]
        for item in items:
            cve_number = item["cve"]["CVE_data_meta"]["ID"]
            sql3 = "select count(*) from project_cve_table where cve_number = %s"
            cursor = conn.cursor()
            cursor.execute(sql3, cve_number)
            count = cursor.fetchone()[0]
            if count == 0:
                try:
                    cursor = conn.cursor()
                    sql4 = "insert into project_cve_table values (%s, %s)"
                    cursor.execute(sql4, (result[0], cve_number))
                    conn.commit()
                except Exception as e:
                    conn.rollback()
                    print("error occurred when insert data", e)
                    print(cve_number)
                finally:
                    cursor.close()
            else:
                cursor.close()

        starIndex += result_per_page

# data cleaning
sql5 = "delete from project_cve_table where cve_number = ''"
try:
    cursor = conn.cursor()
    cursor.execute(sql5)
    conn.commit()
except pymysql.err.OperationalError as e:
    print("error occurred in data cleaning stage")
    conn.rollback()
finally:
    cursor.close()

conn.close()
